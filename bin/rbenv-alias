#!/usr/bin/env bash
#
# Summary: Symlink a short name to an exact version
#
# Usage: rbenv alias <name> [<version> | --auto | --remove]
#        rbenv alias --auto
#        rbenv alias [--list]
#
# Symlink a short name to an exact version.  Passing a second argument of
# --auto selects the latest patch release of the given point version.  Passing
# a first argument of auto does the same for all installed point releases.

shopt -s nullglob

cd "$RBENV_ROOT/versions"

resolve_link() {
  $(type -p greadlink readlink | head -1) "$1"
}

list() {
  local exit=1
  local dir
  for dir in $(echo_lines *); do
    if [ -L "$dir" ]; then
      echo "$dir => $(resolve_link "$dir")"
      exit=0
    fi
  done
  return $exit
}

cleanup_invalid() {
  local version
  for version in *; do
    if [ -L $version -a ! -e "$(resolve_link $version)" ]; then
      echo "Removing invalid link from $version to $(resolve_link $version)"
      rm $version
    fi
  done
}

echo_lines() {
  local line
  for line in "$@"; do
    echo "$line"
  done
}

auto_for_minor() {
  local highest="$(echo_lines $1.[0-9]*|sed -e "s/^${1}\.\([0-9]*\).*/\1/"|sort -n|tail -1)"
  local version_without_patch="$1.$highest"
  auto_for_point "$1.$highest"
}

auto_for_point() {
  local highest="$(echo_lines $1-p[0-9]*|sed -e 's/.*-p//'|sort -n|tail -1)"
  if [ -d "$1-p$highest" ]; then
    echo "$1-p$highest"
  elif [ -d "$1" ]; then
    echo "$1"
  else
    ls -d $1-* 2> /dev/null |sort|tail -1
  fi
}

auto_symlink_minor() {
  local auto="$(auto_for_minor $1)"
  if [ "$1" != "$auto" ]; then
    auto_symlink "$1" "$auto"
  fi
}

auto_symlink_point() {
  local auto="$(auto_for_point $1)"
  if [ "$1" != "$auto" ]; then
    auto_symlink "$1" "$auto"
  fi
}

auto_symlink() {
  if [ -z "$2" ]; then
    echo "Couldn't find any versions for $1" >&2
  else
    ln -nsf "$2" "$1"
    echo "$1 => $2"
  fi
}

point_releases() {
  (
        ls -d *.*.*-* 2> /dev/null |sed -e 's/-.*//'
  )|sort -u
}

minor_releases() {
  (
        ls -d *.*.* 2> /dev/null | sed -e '/^1\./d' -e '/^2\.0\./d' -e 's/-.*//' -e 's/\.[0-9]*$//'
  )|sort -u
}

# Provide rbenv completions
if [ --complete = "$1" ]; then
  shift
  if [ "$#" = 1 ]; then
    echo --auto
    echo --remove
    rbenv-versions --bare
  elif [ "$#" = 0 ]; then
    echo --auto
    echo --list
    { point_releases; minor_releases; rbenv-versions --bare; } | sort -u
  fi
  exit 0
fi

case "$#" in

  2)
    case "$1" in --*)
      case "$2" in -*) exec rbenv-help alias ;; esac
      exec rbenv-alias "$2" "$1" ;;
    esac
    if [ -e "$1" -a ! -L "$1" ]; then
      echo "Not clobbering $1" >&2
      exit 1
    elif [ --remove = "$2" ]; then
      if [ -L "$1" ]; then
        rm "$1"
      else
        echo "No such alias $1" >&2
        exit 1
      fi
    elif [ --auto = "$2" ]; then
      case "$1" in
        [0-9]*.[0-9]*.*)
          auto_symlink_point "$1"
          ;;
        [0-9]*.[0-9]*)
          auto_symlink_minor "$1"
          ;;
        *)
          echo "Don't know how to automatically alias $1" >&2
          exit 1
          ;;
      esac
    else
      echo "$1 => $2"
      ln -nsf "$2" "$1"
    fi
    ;;

  1)
    case "$1" in
      --list)
        list
        ;;
      --auto|--all)
        cleanup_invalid
        for point in $(point_releases); do
          echo POINT $point
          auto_symlink_point $point
        done
        for minor in $(minor_releases); do
          echo MINOR $minor
          auto_symlink_minor $minor
        done
        ;;
      -*)
        rbenv-help alias
        ;;
      *)
        if [ -L "$1" ]; then
          readlink "$1"
        elif [ -d "$1" ]; then
          echo "$1 is an install, not an alias" >&2
          exit 1
        elif [ -e "$1" ]; then
          echo "$1 exists but is not an alias" >&2
          exit 1
        else
          echo "$1 does not exist" >&2
          exit 1
        fi
    esac
    ;;

  0)
    list
    ;;

  *)
    rbenv-help alias
    ;;
esac
